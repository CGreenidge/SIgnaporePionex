# -*- coding: utf-8 -*-
"""pionex

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Pg1SHc8dEnF9riDGsm52VKC_lBL2xM_
"""

import pandas as pd
import re

file_path = '/content/241k-Singapore-pionex.com-Crypto-Trading-Bots-UsersDB-csv-2023.csv'

# Load the CSV file
df = pd.read_csv(file_path, sep=",", low_memory=False)

# Function to clean headers by converting to lowercase and replacing spaces with underscores
def clean_headers(dataframe):
    dataframe.columns = dataframe.columns.str.lower().str.replace(' ', '_')
    return dataframe

# Function to drop specified columns and return garbage data
def drop_and_collect(dataframe, columns_to_drop):
    dropped_data = dataframe[columns_to_drop]
    cleaned_df = dataframe.drop(columns=columns_to_drop)
    return cleaned_df, dropped_data

# Function to chunk the DataFrame
def chunk_dataframe(dataframe, num_chunks):
    chunk_size = len(dataframe) // num_chunks
    return [dataframe[i:i + chunk_size] for i in range(0, len(dataframe), chunk_size)]

# Function to validate emails and split into valid and invalid DataFrames
def validate_emails(dataframe, email_column):
    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    valid = dataframe[dataframe[email_column].str.match(email_regex)]
    invalid = dataframe[~dataframe[email_column].str.match(email_regex)]
    return valid, invalid

# Function to clean phone numbers by stripping whitespace and removing non-numeric characters
def clean_phone_numbers(dataframe, phone_column):
    dataframe[phone_column] = dataframe[phone_column].str.strip().str.replace(r'[^0-9]', '', regex=True)
    return dataframe

# Function to validate phone numbers based on length (between 7 and 15 digits)
def validate_phone_numbers(dataframe, phone_column):
    valid_phone_mask = dataframe[phone_column].str.len().between(7, 15)
    valid_phone_df = dataframe[valid_phone_mask]
    invalid_phone_df = dataframe[~valid_phone_mask]
    return valid_phone_df, invalid_phone_df

# Function to capitalize the first letter of each name in 'first_name' and 'last_name' columns
def clean_names(dataframe, name_columns):
    for column in name_columns:
        if column in dataframe.columns:
            dataframe[column] = dataframe[column].str.title()
    return dataframe

# Function to save data to CSV
def export_data(data, filename):
    data.to_csv(filename, index=False)
    print(f"Data exported to {filename}")

# Clean headers
df = clean_headers(df)

# Drop columns and collect the dropped data for garbage collection
columns_to_drop = ['brandcode', 'lang', 'registrationdate']
df, dropped_data = drop_and_collect(df, columns_to_drop)

# Initialize garbage data collection
garbage_data = pd.DataFrame()

# Clean phone numbers and names
df = clean_phone_numbers(df, 'phone')
df = clean_names(df, ['first_name', 'last_name'])  # Capitalize first and last names

# Chunk, validate, and clean data
chunks = chunk_dataframe(df, 4)
cleaned_chunks = []

for chunk in chunks:
    valid_emails, invalid_emails = validate_emails(chunk, 'email')
    valid_phones, invalid_phones = validate_phone_numbers(chunk, 'phone')

    # Collect invalid data
    garbage_data = pd.concat([garbage_data, invalid_emails, invalid_phones], ignore_index=True)

    # Keep valid emails and phones, then drop duplicates
    valid_chunk = valid_emails[valid_emails.index.isin(valid_phones.index)]
    cleaned_chunks.append(valid_chunk.drop_duplicates(subset='email'))

# Combine all chunks into a final DataFrame and concatenate garbage data
merged_df = pd.concat(cleaned_chunks, ignore_index=True)
garbage_data = pd.concat([garbage_data, dropped_data], ignore_index=True)

# Export cleaned and garbage data
export_data(merged_df, 'singapore_clean.csv')
export_data(garbage_data, 'singapore_garbage.csv')

# Display the shape of the merged DataFrame
print(f"Merged DataFrame shape: {merged_df.shape}")